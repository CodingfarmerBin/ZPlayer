apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

//获取config文件中的配置 rootProject 项目的主对象
def androidConfig = rootProject.ext.defaultConfig
def appIdConfig = rootProject.ext.appIdConfig
def dependenciesConfig = rootProject.ext.dependencies
android {
    compileSdkVersion rootProject.ext.defaultConfig.compileSdkVersion
    defaultConfig {
        applicationId appIdConfig.demo
        minSdkVersion androidConfig.minSdkVersion
        targetSdkVersion androidConfig.targetSdkVersion
        versionCode androidConfig.versionCode
        versionName androidConfig.versionName
        testInstrumentationRunner androidConfig.junit
        //配置BuildConfig 代码中可以调用判断moudle是否为组件
        buildConfigField("boolean", "isComponent", String.valueOf(isComponent))

        //ARouter配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // 单独调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isComponent) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

}

dependencies {
    implementation dependenciesConfig.arouter
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    kapt dependenciesConfig.arouterCompiler
    testImplementation dependenciesConfig.junit
    androidTestImplementation dependenciesConfig.runner
    androidTestImplementation dependenciesConfig.espresso
    implementation dependenciesConfig.constraintlayout

    implementation 'androidx.core:core-ktx:1.0.1'
    implementation 'com.google.android.material:material:1.0.0'
    implementation project(path: ':baselibrary')
    if (!isComponent) {//如果是集成模式下 添加依赖，如果使用aar 可以去掉这个
        implementation project(':shoot')
        implementation project(':video')
    }

    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
}
